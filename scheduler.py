"""
VHM24R - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–±–æ—Ç—ã 24/7
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—á–∏—Å—Ç–∫–∞
"""

import os
import asyncio
import schedule
import time
import threading
from datetime import datetime, date, timedelta
from typing import Dict, List
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

class VHMScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è VHM24R
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É: —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    """
    
    def __init__(self, db, order_processor, telegram_notifier=None, file_manager=None):
        self.db = db
        self.order_processor = order_processor
        self.telegram_notifier = telegram_notifier
        self.file_manager = file_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = BackgroundScheduler()
        self.scheduler.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        self._setup_scheduled_tasks()
        
        print("VHM Scheduler initialized and started")
    
    def _setup_scheduled_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        
        # 1. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–µ—Ä–∫–∞ –≤ 02:00
        self.scheduler.add_job(
            func=self.daily_reconciliation,
            trigger=CronTrigger(hour=2, minute=0),
            id='daily_reconciliation',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
            replace_existing=True
        )
        
        # 2. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 09:00
        self.scheduler.add_job(
            func=self.send_daily_report,
            trigger=CronTrigger(hour=9, minute=0),
            id='daily_report',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
            replace_existing=True
        )
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.scheduler.add_job(
            func=self.check_critical_errors,
            trigger=IntervalTrigger(hours=1),
            id='critical_errors_check',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫',
            replace_existing=True
        )
        
        # 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00)
        self.scheduler.add_job(
            func=self.cleanup_old_files,
            trigger=CronTrigger(day_of_week=6, hour=3, minute=0),
            id='weekly_cleanup',
            name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤',
            replace_existing=True
        )
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
        self.scheduler.add_job(
            func=self.check_machine_health,
            trigger=IntervalTrigger(hours=4),
            id='machine_health_check',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤',
            replace_existing=True
        )
        
        # 6. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 04:00
        self.scheduler.add_job(
            func=self.backup_data,
            trigger=CronTrigger(hour=4, minute=0),
            id='daily_backup',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
            replace_existing=True
        )
        
        # 7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            func=self.system_health_check,
            trigger=IntervalTrigger(minutes=30),
            id='system_health',
            name='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã',
            replace_existing=True
        )
    
    def daily_reconciliation(self):
        """
        –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        """
        try:
            print(f"Starting daily reconciliation at {datetime.now()}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
            cutoff_date = datetime.now() - timedelta(days=2)
            
            unprocessed_orders = self.db.execute_query("""
                SELECT COUNT(*) as count FROM orders 
                WHERE error_type = 'UNPROCESSED' 
                AND created_at >= ?
            """, (cutoff_date,))
            
            if unprocessed_orders and unprocessed_orders[0]['count'] > 0:
                print(f"Found {unprocessed_orders[0]['count']} unprocessed orders")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–≤–µ—Ä–∫—É
                stats = self.order_processor.run_matching()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                if self.telegram_notifier:
                    asyncio.run(self.telegram_notifier.send_processing_complete(
                        session_id=f"daily_{datetime.now().strftime('%Y%m%d')}",
                        stats=stats,
                        files_count=0
                    ))
                
                print(f"Daily reconciliation completed. Stats: {stats}")
            else:
                print("No unprocessed orders found for daily reconciliation")
                
        except Exception as e:
            print(f"Error in daily reconciliation: {e}")
            if self.telegram_notifier:
                asyncio.run(self.telegram_notifier.send_message(
                    f"üö® –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ä–∫–∏: {str(e)}"
                ))
    
    def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if self.telegram_notifier:
                asyncio.run(self.telegram_notifier.send_daily_report())
                print(f"Daily report sent at {datetime.now()}")
        except Exception as e:
            print(f"Error sending daily report: {e}")
    
    def check_critical_errors(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É: –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Üí Telegram
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            one_hour_ago = datetime.now() - timedelta(hours=1)
            
            recent_errors = self.db.execute_query("""
                SELECT 
                    error_type,
                    COUNT(*) as count
                FROM orders 
                WHERE updated_at >= ? 
                AND error_type != 'OK' 
                AND error_type != 'UNPROCESSED'
                GROUP BY error_type
            """, (one_hour_ago,))
            
            if recent_errors:
                total_errors = sum(error['count'] for error in recent_errors)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                critical_threshold = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –æ—à–∏–±–æ–∫ –≤ —á–∞—Å
                try:
                    config = self.db.execute_query(
                        "SELECT config_value FROM system_config WHERE config_key = 'critical_error_threshold'"
                    )
                    if config:
                        critical_threshold = int(config[0]['config_value'])
                except:
                    pass
                
                if total_errors >= critical_threshold:
                    error_stats = {error['error_type']: error['count'] for error in recent_errors}
                    
                    if self.telegram_notifier:
                        asyncio.run(self.telegram_notifier.send_critical_errors_alert(
                            session_id=f"hourly_{datetime.now().strftime('%Y%m%d_%H')}",
                            stats=error_stats
                        ))
                    
                    print(f"Critical errors detected: {total_errors} errors in last hour")
                
        except Exception as e:
            print(f"Error checking critical errors: {e}")
    
    def cleanup_old_files(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if self.file_manager:
                cleanup_stats = self.file_manager.cleanup_old_files(days_to_keep=30)
                
                message = f"""
üßπ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {cleanup_stats['local_deleted']}
‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —É–¥–∞–ª–µ–Ω–æ: {cleanup_stats['remote_deleted']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∏–∑ –ë–î –æ—á–∏—â–µ–Ω–æ: {cleanup_stats['db_cleaned']}
‚Ä¢ –û—à–∏–±–æ–∫: {cleanup_stats['errors']}
                """.strip()
                
                if self.telegram_notifier:
                    asyncio.run(self.telegram_notifier.send_message(message))
                
                print(f"File cleanup completed: {cleanup_stats}")
            
        except Exception as e:
            print(f"Error in file cleanup: {e}")
    
    def check_machine_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            
            machine_issues = self.db.execute_query("""
                SELECT 
                    machine_code,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type != 'OK' THEN 1 END) as error_orders,
                    ROUND(
                        COUNT(CASE WHEN error_type != 'OK' THEN 1 END) * 100.0 / COUNT(*), 
                        1
                    ) as error_rate
                FROM orders 
                WHERE machine_code IS NOT NULL 
                    AND creation_time >= ?
                GROUP BY machine_code
                HAVING COUNT(CASE WHEN error_type != 'OK' THEN 1 END) > 0
                    AND COUNT(*) >= 5
                    AND (COUNT(CASE WHEN error_type != 'OK' THEN 1 END) * 100.0 / COUNT(*)) > 50
                ORDER BY error_rate DESC
            """, (yesterday,))
            
            for issue in machine_issues:
                if self.telegram_notifier:
                    asyncio.run(self.telegram_notifier.send_machine_issues_alert(
                        machine_code=issue['machine_code'],
                        error_count=issue['error_orders'],
                        error_rate=issue['error_rate']
                    ))
                
                print(f"Machine health issue: {issue['machine_code']} - {issue['error_rate']}% error rate")
            
        except Exception as e:
            print(f"Error checking machine health: {e}")
    
    def backup_data(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.file_manager:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞
                yesterday = date.today() - timedelta(days=1)
                
                backup_data = {
                    'date': yesterday.isoformat(),
                    'summary': self._get_daily_summary(yesterday),
                    'orders': self._get_orders_for_backup(yesterday),
                    'backup_type': 'daily_backup',
                    'created_at': datetime.now().isoformat()
                }
                
                session_id = f"backup_{yesterday.strftime('%Y%m%d')}"
                success = self.file_manager.backup_processing_results(session_id, backup_data)
                
                if success:
                    print(f"Daily backup completed for {yesterday}")
                else:
                    print(f"Daily backup failed for {yesterday}")
            
        except Exception as e:
            print(f"Error in daily backup: {e}")
    
    def system_health_check(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db_status = self._check_database_health()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            disk_usage = self._check_disk_usage()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            last_activity = self._check_last_activity()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            issues = []
            
            if not db_status:
                issues.append("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")
            
            if disk_usage > 90:
                issues.append(f"üíæ –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {disk_usage}%")
            
            if last_activity and (datetime.now() - last_activity).total_seconds() > 7200:  # 2 —á–∞—Å–∞
                issues.append("‚è∞ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤")
            
            if issues and self.telegram_notifier:
                message = "üö® <b>–ü–†–û–ë–õ–ï–ú–´ –°–ò–°–¢–ï–ú–´</b>\n\n" + "\n".join(issues)
                asyncio.run(self.telegram_notifier.send_message(message))
            
        except Exception as e:
            print(f"Error in system health check: {e}")
    
    def _get_daily_summary(self, target_date: date) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            summary = self.db.execute_query("""
                SELECT 
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type = 'OK' THEN 1 END) as successful_orders,
                    COUNT(CASE WHEN error_type = 'NO_MATCH_IN_REPORT' THEN 1 END) as no_match_in_report,
                    COUNT(CASE WHEN error_type = 'NO_PAYMENT_FOUND' THEN 1 END) as no_payment_found,
                    COUNT(CASE WHEN error_type = 'FISCAL_MISSING' THEN 1 END) as fiscal_missing,
                    SUM(order_price) as total_amount
                FROM orders 
                WHERE DATE(creation_time) = ?
            """, (target_date,))
            
            return summary[0] if summary else {}
        except:
            return {}
    
    def _get_orders_for_backup(self, target_date: date) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            orders = self.db.execute_query("""
                SELECT 
                    order_number, machine_code, creation_time, order_price,
                    error_type, payment_type, matched_payment, matched_fiscal
                FROM orders 
                WHERE DATE(creation_time) = ?
                ORDER BY creation_time
            """, (target_date,))
            
            return orders[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        except:
            return []
    
    def _check_database_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        try:
            result = self.db.execute_query("SELECT 1")
            return bool(result)
        except:
            return False
    
    def _check_disk_usage(self) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"""
        try:
            import shutil
            total, used, free = shutil.disk_usage('/')
            return (used / total) * 100
        except:
            return 0
    
    def _check_last_activity(self) -> datetime | None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            result = self.db.execute_query("""
                SELECT MAX(created_at) as last_activity 
                FROM orders 
                WHERE created_at >= ?
            """, (datetime.now() - timedelta(days=1),))
            
            if result and result[0]['last_activity']:
                return datetime.fromisoformat(result[0]['last_activity']) if isinstance(result[0]['last_activity'], str) else result[0]['last_activity']
            return None
        except:
            return None
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            print("VHM Scheduler stopped")
    
    def get_job_status(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        jobs = []
        for job in self.scheduler.get_jobs():
            jobs.append({
                'id': job.id,
                'name': job.name,
                'next_run': job.next_run_time.isoformat() if job.next_run_time else None,
                'trigger': str(job.trigger)
            })
        return jobs
    
    def run_job_manually(self, job_id: str) -> bool:
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏"""
        try:
            job = self.scheduler.get_job(job_id)
            if job:
                job.func()
                return True
            return False
        except Exception as e:
            print(f"Error running job {job_id}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
vhm_scheduler = None

def init_scheduler(db, order_processor, telegram_notifier=None, file_manager=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    global vhm_scheduler
    vhm_scheduler = VHMScheduler(db, order_processor, telegram_notifier, file_manager)
    return vhm_scheduler

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global vhm_scheduler
    if vhm_scheduler:
        vhm_scheduler.stop()
        vhm_scheduler = None
