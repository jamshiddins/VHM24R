"""Type stubs for psycopg2.extras"""

from typing import Any, Optional, Dict, List, Union, TYPE_CHECKING

if TYPE_CHECKING:
    from .extensions import cursor, connection
else:
    cursor = Any
    connection = Any

class RealDictCursor(cursor):
    """A cursor that returns results as real dictionaries"""
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def fetchone(self) -> Optional[Dict[str, Any]]: ...
    def fetchmany(self, size: Optional[int] = ...) -> List[Dict[str, Any]]: ...
    def fetchall(self) -> List[Dict[str, Any]]: ...

class DictCursor(cursor):
    """A cursor that returns results as dictionaries"""
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def fetchone(self) -> Optional[Dict[str, Any]]: ...
    def fetchmany(self, size: Optional[int] = ...) -> List[Dict[str, Any]]: ...
    def fetchall(self) -> List[Dict[str, Any]]: ...

class NamedTupleCursor(cursor):
    """A cursor that returns results as named tuples"""
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def register_uuid(oids: Optional[List[int]] = ..., conn_or_curs: Optional[Union[connection, cursor]] = ...) -> None: ...
def register_inet(oid: Optional[int] = ..., conn_or_curs: Optional[Union[connection, cursor]] = ...) -> None: ...
def register_hstore(conn_or_curs: Union[connection, cursor], globally: bool = ..., unicode: bool = ..., oid: Optional[int] = ..., array_oid: Optional[int] = ...) -> None: ...
