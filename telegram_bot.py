"""
VHM24R - Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
"""

import os
import asyncio
import json
from datetime import datetime, date
from typing import Dict, List, Optional
import requests
from telegram import Bot
from telegram.error import TelegramError

class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É:
    - –û—à–∏–±–∫–∏ –≤—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤–µ—Ä–∫–∏
    """
    
    def __init__(self, db=None):
        self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.environ.get('TELEGRAM_CHAT_ID')
        self.db = db
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if self.enabled:
            self.bot = Bot(token=self.bot_token)
        else:
            print("Telegram notifications disabled: missing bot token or chat ID")
    
    async def send_message(self, message: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.enabled:
            print(f"Telegram disabled. Would send: {message}")
            return False
        
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=parse_mode
            )
            return True
        except TelegramError as e:
            print(f"Telegram error: {e}")
            return False
    
    async def send_critical_errors_alert(self, session_id: str, stats: Dict[str, int]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–º—Ç—É: –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
        """
        if not self.enabled:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        critical_threshold = 10
        if self.db:
            try:
                config = self.db.execute_query(
                    "SELECT config_value FROM system_config WHERE config_key = 'critical_error_threshold'"
                )
                if config:
                    critical_threshold = int(config[0]['config_value'])
            except:
                pass
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        total_errors = (
            stats.get('NO_MATCH_IN_REPORT', 0) +
            stats.get('NO_PAYMENT_FOUND', 0) +
            stats.get('EXCESS_PAYMENT', 0) +
            stats.get('PAYMENT_MISMATCH', 0) +
            stats.get('FISCAL_MISSING', 0)
        )
        
        if total_errors >= critical_threshold:
            message = f"""
üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –°–í–ï–†–ö–ò</b>

üìä <b>–°–µ—Å—Å–∏—è:</b> {session_id[:8]}...
‚ö†Ô∏è <b>–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:</b> {total_errors}
‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {stats.get('OK', 0)}

<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫:</b>
‚Ä¢ –ù–µ—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —É—á–µ—Ç–µ: {stats.get('NO_MATCH_IN_REPORT', 0)}
‚Ä¢ –ù–µ—Ç –æ–ø–ª–∞—Ç—ã: {stats.get('NO_PAYMENT_FOUND', 0)}
‚Ä¢ –õ–∏—à–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏: {stats.get('EXCESS_PAYMENT', 0)}
‚Ä¢ –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º: {stats.get('PAYMENT_MISMATCH', 0)}
‚Ä¢ –ù–µ—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤: {stats.get('FISCAL_MISSING', 0)}

üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö!
            """.strip()
            
            await self.send_message(message)
    
    async def send_daily_report(self, report_date: Optional[date] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.enabled or not self.db:
            return
        
        if report_date is None:
            report_date = date.today()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            daily_stats = self.db.execute_query("""
                SELECT 
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type = 'OK' THEN 1 END) as successful_orders,
                    COUNT(CASE WHEN error_type = 'NO_MATCH_IN_REPORT' THEN 1 END) as no_match_in_report,
                    COUNT(CASE WHEN error_type = 'NO_PAYMENT_FOUND' THEN 1 END) as no_payment_found,
                    COUNT(CASE WHEN error_type = 'FISCAL_MISSING' THEN 1 END) as fiscal_missing,
                    SUM(order_price) as total_amount,
                    SUM(CASE WHEN error_type = 'OK' THEN order_price ELSE 0 END) as successful_amount
                FROM orders 
                WHERE DATE(creation_time) = ?
            """, (report_date,))
            
            if not daily_stats or daily_stats[0]['total_orders'] == 0:
                return
            
            stats = daily_stats[0]
            success_rate = (stats['successful_orders'] / stats['total_orders'] * 100) if stats['total_orders'] > 0 else 0
            
            message = f"""
üìà <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –°–í–ï–†–ö–ò</b>

üìÖ <b>–î–∞—Ç–∞:</b> {report_date.strftime('%d.%m.%Y')}

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_orders']} ({success_rate:.1f}%)
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Å—É–º
‚Ä¢ –°–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {stats['successful_amount']:,.0f} —Å—É–º

‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>
‚Ä¢ –ù–µ—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —É—á–µ—Ç–µ: {stats['no_match_in_report']}
‚Ä¢ –ù–µ—Ç –æ–ø–ª–∞—Ç—ã: {stats['no_payment_found']}
‚Ä¢ –ù–µ—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤: {stats['fiscal_missing']}

üïê <b>–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:</b> {datetime.now().strftime('%H:%M')}
            """.strip()
            
            await self.send_message(message)
            
        except Exception as e:
            print(f"Error sending daily report: {e}")
    
    async def send_processing_complete(self, session_id: str, stats: Dict[str, int], files_count: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.enabled:
            return
        
        total_orders = sum(stats.values())
        success_rate = (stats.get('OK', 0) / total_orders * 100) if total_orders > 0 else 0
        
        message = f"""
‚úÖ <b>–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìÅ <b>–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {files_count}
üìä <b>–ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {total_orders}
üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–≤–µ—Ä–∫–∏:</b> {success_rate:.1f}%

<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('OK', 0)}
‚ùå –û—à–∏–±–æ–∫: {total_orders - stats.get('OK', 0)}

üÜî <b>–°–µ—Å—Å–∏—è:</b> {session_id[:8]}...
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """.strip()
        
        await self.send_message(message)
    
    async def send_machine_issues_alert(self, machine_code: str, error_count: int, error_rate: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º"""
        if not self.enabled:
            return
        
        if error_rate > 50:  # –ë–æ–ª–µ–µ 50% –æ—à–∏–±–æ–∫
            message = f"""
üö® <b>–ü–†–û–ë–õ–ï–ú–´ –° –ê–í–¢–û–ú–ê–¢–û–ú</b>

üè™ <b>–ê–≤—Ç–æ–º–∞—Ç:</b> {machine_code}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {error_count}
üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫:</b> {error_rate:.1f}%

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∞!
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """.strip()
            
            await self.send_message(message)
    
    def send_sync(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return False
        
        try:
            asyncio.run(self.send_message(message))
            return True
        except Exception as e:
            print(f"Error sending sync message: {e}")
            return False


class TelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    def __init__(self, db):
        self.db = db
        self.notifier = TelegramNotifier(db)
    
    async def handle_command(self, command: str, chat_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        command = command.lower().strip()
        
        if command == '/start':
            return """
ü§ñ <b>VHM24R - –°–∏—Å—Ç–µ–º–∞ —Å–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/today - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/machines - –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã
/help - –°–ø—Ä–∞–≤–∫–∞
            """.strip()
        
        elif command == '/stats':
            return await self._get_current_stats()
        
        elif command == '/today':
            return await self._get_today_report()
        
        elif command == '/machines':
            return await self._get_machine_issues()
        
        elif command == '/help':
            return """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/today - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/machines - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö.
            """.strip()
        
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    
    async def _get_current_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.db.execute_query("""
                SELECT 
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type = 'OK' THEN 1 END) as successful_orders,
                    COUNT(CASE WHEN error_type != 'OK' AND error_type != 'UNPROCESSED' THEN 1 END) as error_orders
                FROM orders 
                WHERE creation_time >= CURRENT_DATE - INTERVAL '7 days'
            """)
            
            if stats:
                stat = stats[0]
                success_rate = (stat['successful_orders'] / stat['total_orders'] * 100) if stat['total_orders'] > 0 else 0
                
                return f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 7 –î–ù–ï–ô</b>

üìà –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stat['total_orders']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stat['successful_orders']} ({success_rate:.1f}%)
‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {stat['error_orders']}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """.strip()
            else:
                return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
    
    async def _get_today_report(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today_stats = self.db.execute_query("""
                SELECT 
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type = 'OK' THEN 1 END) as successful_orders,
                    COUNT(CASE WHEN error_type = 'NO_MATCH_IN_REPORT' THEN 1 END) as no_match_in_report,
                    COUNT(CASE WHEN error_type = 'NO_PAYMENT_FOUND' THEN 1 END) as no_payment_found,
                    COUNT(CASE WHEN error_type = 'FISCAL_MISSING' THEN 1 END) as fiscal_missing,
                    SUM(order_price) as total_amount
                FROM orders 
                WHERE DATE(creation_time) = CURRENT_DATE
            """)
            
            if today_stats and today_stats[0]['total_orders'] > 0:
                stat = today_stats[0]
                success_rate = (stat['successful_orders'] / stat['total_orders'] * 100) if stat['total_orders'] > 0 else 0
                
                return f"""
üìÖ <b>–û–¢–ß–ï–¢ –ó–ê –°–ï–ì–û–î–ù–Ø</b>

üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stat['total_orders']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stat['successful_orders']} ({success_rate:.1f}%)
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {stat['total_amount']:,.0f} —Å—É–º

‚ùå –ü—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –ù–µ—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —É—á–µ—Ç–µ: {stat['no_match_in_report']}
‚Ä¢ –ù–µ—Ç –æ–ø–ª–∞—Ç—ã: {stat['no_payment_found']}
‚Ä¢ –ù–µ—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤: {stat['fiscal_missing']}

üïê {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """.strip()
            else:
                return "üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"
    
    async def _get_machine_issues(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤"""
        try:
            machine_issues = self.db.execute_query("""
                SELECT 
                    machine_code,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN error_type != 'OK' THEN 1 END) as error_orders,
                    ROUND(
                        COUNT(CASE WHEN error_type != 'OK' THEN 1 END) * 100.0 / COUNT(*), 
                        1
                    ) as error_rate
                FROM orders 
                WHERE machine_code IS NOT NULL 
                    AND creation_time >= CURRENT_DATE - INTERVAL '3 days'
                GROUP BY machine_code
                HAVING COUNT(CASE WHEN error_type != 'OK' THEN 1 END) > 0
                ORDER BY error_rate DESC
                LIMIT 10
            """)
            
            if machine_issues:
                message = "üè™ <b>–ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–í–¢–û–ú–ê–¢–´ (3 –¥–Ω—è)</b>\n\n"
                
                for issue in machine_issues:
                    status_icon = "üö®" if issue['error_rate'] > 50 else "‚ö†Ô∏è" if issue['error_rate'] > 20 else "üî∏"
                    message += f"{status_icon} <b>{issue['machine_code']}</b>: {issue['error_orders']}/{issue['total_orders']} ({issue['error_rate']}%)\n"
                
                message += f"\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                return message
            else:
                return "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–∞—Ç–∞—Ö: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
telegram_notifier = None
telegram_bot = None

def init_telegram(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –º–æ–¥—É–ª–µ–π"""
    global telegram_notifier, telegram_bot
    telegram_notifier = TelegramNotifier(db)
    telegram_bot = TelegramBot(db)
    return telegram_notifier, telegram_bot
