#!/usr/bin/env python3
"""
VHM24R - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

import os
import sys
import sqlite3
from datetime import datetime

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from models import get_database
        db = get_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        result = db.execute_query("SELECT 1 as test")
        if result and result[0]['test'] == 1:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_file_detector():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        from file_detector_updated import AdvancedFileTypeDetector
        detector = AdvancedFileTypeDetector()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
        supported_types = detector.get_supported_types()
        expected_types = ['happy_workers', 'vendhub', 'fiscal_bills', 'payme', 'click', 'uzum']
        
        for expected_type in expected_types:
            if expected_type in supported_types:
                print(f"‚úÖ –¢–∏–ø —Ñ–∞–π–ª–∞ {expected_type} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            else:
                print(f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ {expected_type} –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return False
        
        print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def test_processors():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")
    
    try:
        from models import get_database
        from processors_updated import OrderProcessor, RecipeProcessor, FinanceProcessor
        
        db = get_database()
        
        # –¢–µ—Å—Ç OrderProcessor
        order_processor = OrderProcessor(db)
        if hasattr(order_processor, 'ORDER_STATUSES'):
            print("‚úÖ OrderProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå OrderProcessor –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ORDER_STATUSES")
            return False
        
        # –¢–µ—Å—Ç RecipeProcessor
        recipe_processor = RecipeProcessor(db)
        stats = recipe_processor.get_recipe_stats()
        if isinstance(stats, dict):
            print("‚úÖ RecipeProcessor —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå RecipeProcessor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç FinanceProcessor
        finance_processor = FinanceProcessor(db)
        finance_stats = finance_processor.get_finance_stats()
        if isinstance(finance_stats, dict):
            print("‚úÖ FinanceProcessor —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå FinanceProcessor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {e}")
        return False

def test_app_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from models import get_database
        from processors_updated import OrderProcessor
        from file_detector_updated import AdvancedFileTypeDetector
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        import app
        if hasattr(app, 'app') and app.app is not None:
            print("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print("‚ùå Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return False
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_database_schema():
    """–¢–µ—Å—Ç —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from models import get_database
        db = get_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        required_tables = [
            'orders', 'order_changes', 'unmatched_records', 
            'conflicts', 'file_metadata', 'system_config', 'processing_logs'
        ]
        
        for table in required_tables:
            try:
                result = db.execute_query(f"SELECT COUNT(*) as count FROM {table}")
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({result[0]['count']} –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ orders
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            import sqlite3
            conn = sqlite3.connect('orders.db')
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(orders)")
            columns = [row[1] for row in cursor.fetchall()]
            conn.close()
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ orders: {len(columns)}")
            
            required_columns = [
                'order_number', 'machine_code', 'order_price', 
                'creation_time', 'paying_time', 'match_status',
                'gateway_amount', 'fiscal_amount'  # –ù–æ–≤—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            ]
            
            for column in required_columns:
                if column in columns:
                    print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ {column} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã orders: {e}")
            return False
        
        print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from models import get_database
        db = get_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = db.execute_query("SELECT * FROM system_config")
        
        required_configs = [
            'time_tolerance_seconds', 'amount_tolerance', 
            'commission_calculation'  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        ]
        
        config_keys = [c['config_key'] for c in config]
        
        for req_config in required_configs:
            if req_config in config_keys:
                value = next(c['config_value'] for c in config if c['config_key'] == req_config)
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {req_config} = {value}")
            else:
                print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {req_config} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        commission_calc = next(
            (c['config_value'] for c in config if c['config_key'] == 'commission_calculation'), 
            None
        )
        
        if commission_calc == 'direct_comparison':
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—É–º–º)")
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: {commission_calc}")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã VHM24R")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_connection),
        ("–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤", test_file_detector),
        ("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", test_processors),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_app_initialization),
        ("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_schema),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", test_configuration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
